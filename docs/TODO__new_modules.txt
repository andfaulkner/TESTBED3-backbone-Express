____________________________________________________________________________________
react-router
    npm install --save react-router
    -- makes react handle client-side routing


_________________________________________________________________________________________________________
_________________________________________________________________________________________________________
_________________________________________________________________________________________________________
REDUX - FOR REACT - LIKE FLUX BUT MORE MINIMAL, MORE 'FUNCTIONAL'
--- http://rackt.github.io/redux/docs/introduction/ThreePrinciples.html
        :) :) :)
_________________________________________________________________________________________________________
                npm install --save redux
                    ** https://github.com/rackt/redux

    - Lets us store application state
    -
- Nice Redux ecosystem, though one isn't really needed given how minimal it is...

    redux-logger: easy logging of redux actions: logs every
       Redux action & the next 'state'.
                npm install --save redux-logger
                    ** https://github.com/fcomb/redux-logger

    react-redux. Redux plays extremely well with React (obviously), with this
       module intended to bind them.
                npm install --save react-redux
                    ** https://github.com/rackt/react-redux

    redux-devtools:
                npm install --save-dev redux-devtools
                    ** https://github.com/gaearon/redux-devtools

        ** https://github.com/rackt/react-router

    redux-form. Keep React form state in Redux.
                npm install redux-form
                    ** https://github.com/erikras/redux-form    <<--- no lost form data :)

    redux-router. Lets you keep your router state in your Redux store. Binds
       to react-router.
                npm install --save redux-router
                    ** https://github.com/rackt/redux-router

    If we use Redux...a nice standard form for 'actions':
            ** https://github.com/acdlite/flux-standard-action
_______________________________________________________________________________
-- advantages:
    - Same benefits as Flux, really.

    - plays very nice with React (designed for it)...but isn't tied to it either.

    - like Seneca (and Flux, for that matter), uses action-based architecture.
        - this may make adaptation easier

    - Lightweight

    - Puts the entire state in one state tree, eliminating the 'what state are we
      even in WTF?!?!?' logging/tracing hell we're in with Seneca.
            -- All actions act on the one tree with Redux - not on various disparate
               locations holding bits and pieces of state (as seems to happen with Seneca)

    - Lineage of state trees are stored (temporarily). This allows time travel debugging.
        - You can reproduce any exact state of the app at any point, by going to the starting state,
          and replaying (literally replaying) the actions that occurred.
        - Tracing what caused a change, and what change was produced === trivial (especially with redux-logger).
        - ...together this turns the app into a starting state and a sequence of actions.
            --- with the ability to do things like turn back one single action...then redo it again.

    - It hotloads!!!! i.e. auto-updates view and reducer (controller?) components without reloading page.

    - Performant & easy-to-understand state tracking. How Redux determines if a change has in
      the model: checks if the state object is the same object it was before (because any change
      in the model results in a whole new model being created - any given state tree is immutable).
      Same object reference means same underlying data.
        --- This lets us use '===' compares rather than deep compares. JS is very, very fast at this.
https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux


_________________________________________________________________
IMMUTABLE-JS
http://facebook.github.io/immutable-js/
--- mutative API which does not update the data in-place, but instead always
    yields new updated data
--- WAY FASTER DEVELOPMENT. Allows e.g. hot-reloading, time travel, etc.
--- Not actually slower. The entirety of Clojure & Clojurescript is based around
    this idea, and the Om framework (https://github.com/omcljs/om) for ReactJS -
    written with Clojurescript - is actually quite performant
_________________________________________________________________


_________________________________________________________________
FLOW
http://flowtype.org/
--- syntax to allow 'gradual typing' - i.e. static type checker that uses
    type inference and provided annotations to help find type errors
--- No lock-in - gradual type system - you can easily write 'dynamic' parts
    of the app that bypass the type checker
    --- i.e. mixing statically typed code w/ dynamic code === encouraged
--- just way easier debugging
--- plays very, very nice with React & co.
_________________________________________________________________


_________________________________________________________________________________________________________
_________________________________________________________________________________________________________
_________________________________________________________________________________________________________


GENERATE UML FOR NODEJS
npm install wavi -g

_________________________________________________________________
** pub-sub for postgres module:
pg-pubsub module: https://www.npmjs.com/package/pg-pubsub
_________________________________________________________________

__________________________________________________________________________
 pgcli
-- makes it easier to play with postgres
    -- SQL autocompletes!
    -- syntax highlighting!
- repo: https://github.com/dbcli/pgcli
- site: http://pgcli.com/
-- to install:
    brew install pgcli
...then...
    pgcli postgres
    pgcli isight
    pgcli isight_audit
    pgcli template1
    pgcli postgres://postgres:postgres@localhost:5432/postgres
    pgcli postgres://postgres:postgres@localhost:5432/isight
    pgcli postgres://postgres:postgres@localhost:5432/isight_audit
    pgcli postgres://postgres:postgres@localhost:5432/template1
____________________________________________________________________________

GET THIS INTO BASHRC!:
alias murdernode='ps aux | grep "gulp\|node\|npm" | cut -d" " -f2 | sudo xargs kill -9'

GREAT BB TUTORIAL:
http://stackoverflow.com/questions/18504235/understand-backbone-js-rest-calls

MUST - EXCELLENT FRAMEWORK:::
http://vidigami.github.io/backbone-orm/index.html
backbone-ORM

For the REST API part
node-restify
--- seems to play nice with express
    --- integrate restify with express?
        --- express handling different routes from restify, perhaps

______________________________BB EXAMPLES AND TUTORIALS FOR REST ETC._________________________________
Great backbone front-to-back tutorial
https://scotch.io/tutorials/build-a-restful-api-using-node-and-express-4

Decent info here
http://bigspaceship.github.io/blog/2014/05/14/how-to-create-a-rest-api-with-node-dot-js/

Developing Backbone apps book:
http://addyosmani.github.io/backbone-fundamentals/
___________________________________________________________________________________________________

More commands for me:
https://gist.github.com/andfaulkner/b396b1869c9e1392f109


npm i -g terminal-tree      --      https://www.npmjs.com/package/terminal-tree
    --  Make a tree in the cli. Looks really cool. Handy for debugging.


npm install https://github.com/jaz303/spawn-terminal.git --save
--- launch a new terminal window :)

____________________________ ROOTPATH ____________________________
https://www.npmjs.com/package/rootpath
npm install rootpath --save
- at the top of the first file:
    require('rootpath')();
        - ...and all paths become relative to the root directory
__________________________________________________________________


___________________________________________________________________
_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_
Add this to .bash_profile:

. <(npm completion)

___________________________________________________________________
_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_


add this to package.json:
--stack-trace-limit=1000


GRAB POSTMAN!

MUST:::
    backbone-db-redis
    backbone-db
        -- let BB interact with a db - Backbone database interface
    backbone-db-elasticsearch
    backbone-blueprint
        -- BB schemas

    ALL TOGETHER:
        serverbone
            https://www.npmjs.com/package/serverbone
            --- and a nice example:
                https://github.com/kosmikko/serverbone-example

Backbone ORM / Rest?
http://vidigami.github.io/backbone-orm/backbone-rest.html

BUSBOY?


NODE_CONSOLE?
npm install node-console